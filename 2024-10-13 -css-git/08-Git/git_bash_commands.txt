
# Git Bash Commands and Explanations

## 1. git init
- **Description**: Initializes a new Git repository in the current directory.
- **Command**:
    ```
    git init
    ```

## 2. git clone
- **Description**: Clones an existing repository from a remote location to your local machine.
- **Command**:
    ```
    git clone <repository-url>
    ```

## 3. git status
- **Description**: Displays the current state of the working directory and the staging area.
- **Command**:
    ```
    git status
    ```

## 4. git add
- **Description**: Adds changes in the working directory to the staging area.
- **Command**:
    ```
    git add <filename>
    # Or to add all files
    git add .
    ```

## 5. git commit
- **Description**: Records changes to the repository with a message describing what was changed.
- **Command**:
    ```
    git commit -m "Commit message"
    ```

## 6. git push
- **Description**: Uploads local repository content to a remote repository.
- **Command**:
    ```
    git push origin <branch-name>
    ```

## 7. git pull
- **Description**: Fetches and merges changes from a remote repository to the current branch.
- **Command**:
    ```
    git pull origin <branch-name>
    ```

## 8. git branch
- **Description**: Lists all branches or creates a new one.
- **Command**:
    ```
    # To create a new branch:
    git branch <new-branch-name>
    
    # To list all branches:
    git branch
    ```

## 9. git checkout
- **Description**: Switches to a different branch or restores files.
- **Command**:
    ```
    git checkout <branch-name>
    
    # To create a new branch and switch to it:
    git checkout -b <new-branch-name>
    ```

## 10. git merge
- **Description**: Merges changes from one branch into the current branch.
- **Command**:
    ```
    git merge <branch-name>
    ```

## 11. git log
- **Description**: Shows the commit history for the current branch.
- **Command**:
    ```
    git log
    ```

## 12. git remote
- **Description**: Manages the set of tracked repositories.
- **Command**:
    ```
    # To add a remote repository:
    git remote add origin <repository-url>
    
    # To display remote repositories:
    git remote -v
    ```

## 13. git stash
- **Description**: Temporarily saves changes that are not ready for commit.
- **Command**:
    ```
    git stash
    # To reapply the stashed changes:
    git stash pop
    ```

## 14. git reset
- **Description**: Removes changes from the staging area.
- **Command**:
    ```
    git reset <file>
    ```

## 15. git rebase
- **Description**: Reapplies commits on top of another base tip, keeping the history linear.
- **Command**:
    ```
    git rebase <branch-name>
    ```

## 16. git diff
- **Description**: Shows changes between commits, branches, or files.
- **Command**:
    ```
    git diff
    ```

## 17. git rm
- **Description**: Deletes a file from both the working directory and the index.
- **Command**:
    ```
    git rm <filename>
    ```

## 18. git fetch
- **Description**: Downloads changes from a remote repository without applying them.
- **Command**:
    ```
    git fetch origin
    ```

## 19. git tag
- **Description**: Tags a specific commit for easy reference later (e.g., for marking releases).
- **Command**:
    ```
    git tag <tag-name>
    ```

## 20. git config
- **Description**: Sets Git configuration values (e.g., user information).
- **Command**:
    ```
    git config --global user.name "Your Name"
    git config --global user.email "your.email@example.com"
    ```

